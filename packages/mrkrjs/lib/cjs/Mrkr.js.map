{"version":3,"sources":["../../src/Mrkr.ts"],"names":["isTextNode","node","nodeType","isValidOffset","offset","startOffset","endOffset","textNodesUnder","all","firstChild","nextSibling","push","concat","Mrkr","props","startContainer","endContainer","textNodes","element","currentIndex","absoluteStartOffset","absoluteEndOffset","some","textNode","textContent","length","document","body","className","onSelection","maximum","undefined","minimum","overlap","highlightClass","selectionEnabled","handlePointerUp","bind","setElement","event","results","highlight","Array","from","querySelectorAll","text","highlightedText","substring","highlightedSpanNode","createElement","classList","add","startTextNode","createTextNode","highlightedTextNode","endTextNode","appendChild","newNodes","addEventListener","removeEventListener","highlightedTextNodes","getHighlightedNodes","reduce","arr","current","startFound","data","i","find","nodes","unregister","register","offsetTargets","offsets","filter","o","highlightedNodes","forEach","highlightedNode","replaceWith","childNodes","n","ends","map","Math","max","selection","window","getSelection","console","error","Error","range","getRangeAt","getAbsoluteOffsets","removeAllRanges","highlights","getData","highlightRange","newCurrentIndex","highlightNode","isEnabled"],"mappings":"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","sourcesContent":["type OffsetProps = {\n  startOffset?: number;\n  endOffset?: number;\n};\n\ntype DataProps = OffsetProps & {\n  text: string;\n  nodes: Text[];\n};\n\n// Type guard for Text nodes\nfunction isTextNode(node: Node): node is Text {\n  return (node as Text).nodeType === 3;\n}\n\n// Type guard for offset\nfunction isValidOffset(offset?: OffsetProps): offset is { startOffset: number; endOffset: number } {\n  return !!(offset && typeof offset.startOffset === 'number' && typeof offset.endOffset === 'number');\n}\n\n/**\n * Gets an array of text nodes under the passed node\n *\n * @param {HTMLElement} node\n * @returns {[HTMLElement]} - array of text nodes\n */\nconst textNodesUnder = (node: any): Text[] => {\n  let all: Text[] = [];\n\n  // eslint-disable-next-line no-param-reassign\n  for (node = node.firstChild; node; node = node.nextSibling) {\n    if (isTextNode(node)) all.push(node);\n    else all = all.concat(textNodesUnder(node));\n  }\n  return all;\n};\n\ninterface Props {\n  element?: HTMLElement;\n  className?: string;\n  minimum?: number;\n  maximum?: number;\n  overlap?: boolean;\n  onSelection?: (e: PointerEvent, data: DataProps[]) => void;\n}\n\ninterface Range {\n  startContainer: ChildNode;\n  endContainer: ChildNode;\n  startOffset: number;\n  endOffset: number;\n}\n\nexport default class Mrkr {\n  element: HTMLElement;\n\n  highlightClass: string;\n\n  maximum?: number;\n\n  minimum?: number;\n\n  overlap?: boolean;\n\n  onSelection?: (e: PointerEvent, data: DataProps[]) => void;\n\n  private selectionEnabled: boolean;\n\n  constructor(props: Props = {}) {\n    const {\n      element = document.body,\n      className = 'highlight',\n      onSelection,\n      maximum = undefined,\n      minimum = undefined,\n      overlap = true,\n    } = props;\n\n    this.element = element;\n    this.highlightClass = className;\n    this.selectionEnabled = false;\n    this.maximum = maximum;\n    this.minimum = minimum;\n    this.overlap = overlap;\n    this.onSelection = onSelection;\n\n    this.handlePointerUp = this.handlePointerUp.bind(this);\n\n    this.setElement(element);\n  }\n\n  /**\n   * Callback run on pointerup\n   *\n   * @private\n   * @param {PointerEvent} event\n   * @memberof Mrkr\n   */\n  private handlePointerUp(event: PointerEvent) {\n    if (this.selectionEnabled) {\n      const results = this.highlight();\n\n      if (this.onSelection) this.onSelection(event, results);\n    }\n  }\n\n  /**\n   * Gets all nodes that have the current className\n   *\n   * @private\n   * @returns {HTMLElement[]}\n   * @memberof Mrkr\n   */\n  private getHighlightedNodes(className?: string): HTMLElement[] {\n    if (!this.element) return [];\n\n    return Array.from(this.element.querySelectorAll(`.${className || this.highlightClass}`));\n  }\n\n  /**\n   * Creates a set of highlighted and non-highlighted nodes to replace the passed text content\n   *\n   * @private\n   * @param {(string | null)} [text='']\n   * @param {number} startOffset\n   * @param {number} endOffset\n   * @returns {ChildNode[]}\n   * @memberof Mrkr\n   */\n  private highlightNode(text: string | null = '', startOffset: number, endOffset: number): ChildNode[] {\n    if (!text) return [];\n\n    const highlightedText = text.substring(startOffset, endOffset);\n\n    if (highlightedText.length > 0) {\n      const highlightedSpanNode = document.createElement('SPAN');\n      highlightedSpanNode.classList.add(this.highlightClass);\n\n      const startTextNode = document.createTextNode(text.substring(0, startOffset));\n      const highlightedTextNode = document.createTextNode(highlightedText);\n      const endTextNode = document.createTextNode(text.substring(endOffset));\n\n      highlightedSpanNode.appendChild(highlightedTextNode);\n\n      const newNodes = [];\n      if (startTextNode.textContent) newNodes.push(startTextNode);\n      newNodes.push(highlightedSpanNode);\n      if (endTextNode.textContent) newNodes.push(endTextNode);\n\n      return newNodes;\n    }\n\n    return [document.createTextNode(text)];\n  }\n\n  /**\n   * Converts relative range offset data to absolute offsets\n   *\n   * @private\n   * @memberof Mrkr\n   */\n  private getAbsoluteOffsets = (\n    startContainer: Text,\n    startOffset: number,\n    endContainer: Text,\n    endOffset: number,\n  ): OffsetProps => {\n    const textNodes = textNodesUnder(this.element);\n    let currentIndex = 0;\n    let absoluteStartOffset;\n    let absoluteEndOffset;\n\n    textNodes.some((textNode) => {\n      if (!textNode?.textContent) return false;\n\n      if (textNode === startContainer) {\n        absoluteStartOffset = currentIndex + startOffset;\n      }\n\n      if (textNode === endContainer) {\n        absoluteEndOffset = currentIndex + endOffset;\n        return true;\n      }\n\n      currentIndex += textNode.textContent.length;\n      return false;\n    });\n\n    if (absoluteStartOffset && absoluteEndOffset) {\n      return { startOffset: absoluteStartOffset, endOffset: absoluteEndOffset };\n    }\n\n    return {};\n  };\n\n  /**\n   * Adds the event listener for pointerup\n   *\n   * @memberof Mrkr\n   */\n  private register(): void {\n    this.element.addEventListener('pointerup', this.handlePointerUp);\n  }\n\n  /**\n   * Removes the event listener for pointerup\n   *\n   * @memberof Mrkr\n   */\n  private unregister(): void {\n    this.element.removeEventListener('pointerup', this.handlePointerUp);\n  }\n\n  /**\n   * Sets the current classname\n   *\n   * @param {string} className\n   * @memberof Mrkr\n   */\n  setClassName(className: string): void {\n    this.highlightClass = className;\n  }\n\n  /**\n   * Searches the container element for any highlighted nodes\n   * according to the current className\n   *\n   * @param {string} [className] - optional classname, otherwise will check for this.highlightClass\n   * @returns {DataProps[]}\n   * @memberof Mrkr\n   */\n  getData(className?: string): DataProps[] {\n    if (!this.element) return [];\n\n    const textNodes = textNodesUnder(this.element);\n    const highlightedTextNodes = this.getHighlightedNodes(className).reduce(\n      (arr: Text[], current) => [...arr, ...textNodesUnder(current)],\n      [],\n    );\n\n    let currentIndex = 0;\n\n    let startFound = false;\n\n    const data: DataProps[] = [];\n\n    textNodes.some((textNode, i) => {\n      if (!textNode.textContent) return false;\n\n      const highlightedTextNode = highlightedTextNodes.find((node) => node === textNode);\n\n      if (highlightedTextNode) {\n        if (!startFound) {\n          data.push({\n            startOffset: currentIndex,\n            text: textNode.textContent,\n            nodes: [highlightedTextNode],\n          });\n\n          startFound = true;\n        } else {\n          data[data.length - 1].text += textNode.textContent;\n          data[data.length - 1].nodes.push(highlightedTextNode);\n        }\n\n        // If this node is also the last node\n        if (i === textNodes.length - 1) {\n          data[data.length - 1].endOffset = currentIndex + textNode.textContent.length;\n        }\n      } else if (startFound) {\n        data[data.length - 1].endOffset = currentIndex;\n        startFound = false;\n      }\n\n      currentIndex += textNode.textContent.length;\n\n      return false;\n    });\n\n    return data;\n  }\n\n  /**\n   * Sets the current container element\n   *\n   * @param {HTMLElement} element\n   * @memberof Mrkr\n   */\n  setElement(element: HTMLElement): void {\n    this.unregister();\n    this.element = element;\n    this.register();\n  }\n\n  /**\n   * Clears all or part of the highlighted text blocks\n   *\n   * @param {OffsetProps[]} [offsetTargets] - optional array of offsets to target and remove\n   * @returns {void}\n   * @memberof Mrkr\n   */\n  clear(offsetTargets?: OffsetProps[]): void {\n    if (!this.element) return;\n\n    // Guard against bad offset inputs\n    const offsets = offsetTargets?.filter((o) => isValidOffset(o));\n\n    const highlightedNodes = this.getHighlightedNodes();\n    const textNodes = textNodesUnder(this.element);\n\n    // If offsets array not included, clear all\n    if (!offsets) {\n      highlightedNodes.forEach((highlightedNode) => {\n        highlightedNode.replaceWith(...Array.from(highlightedNode.childNodes));\n      });\n    } else {\n      // Clear all highlighted text that falls between the offsets in the passed offsets array\n      let currentIndex = 0;\n\n      // Clear any text nodes that fall inside any of the offset ranges passed\n      textNodes.some((textNode) => {\n        if (\n          offsets.find(\n            (offset) => isValidOffset(offset) && currentIndex >= offset.startOffset && currentIndex <= offset.endOffset,\n          )\n        ) {\n          const highlightedNode = highlightedNodes.find(\n            (node) => !!Array.from(node.childNodes).find((n) => n === textNode),\n          );\n          if (highlightedNode) {\n            highlightedNode.replaceWith(...Array.from(highlightedNode.childNodes));\n          }\n        }\n\n        // Can stop searching\n        const ends = offsets.map((offset) => offset.endOffset).filter((n) => typeof n === 'number') as number[];\n        if (currentIndex > Math.max(...ends)) {\n          return true;\n        }\n\n        currentIndex += textNode.textContent?.length || 0;\n        return false;\n      });\n    }\n  }\n\n  highlight(): DataProps[] {\n    const selection = window.getSelection();\n    const results: DataProps[] = [];\n\n    // If there's no selection object\n    if (!selection) return results;\n\n    // Container element must be defined\n    if (!this.element) {\n      console.error(new Error('Container element not defined for highlighter.'));\n      return results;\n    }\n\n    const range = selection.getRangeAt(0);\n\n    const { startContainer, endContainer } = range as unknown as Range;\n\n    // Ensure that results are Text nodes\n    if (isTextNode(startContainer) && isTextNode(endContainer)) {\n      const startTextNode = startContainer;\n      const endTextNode = endContainer;\n\n      // If no content's actually been selected\n      if (startTextNode === endTextNode && range.endOffset === range.startOffset) return results;\n\n      // Convert to absolute offsets in the element\n      const offsets = this.getAbsoluteOffsets(startContainer, range.startOffset, endContainer, range.endOffset);\n\n      // Remove native selection\n      selection.removeAllRanges();\n\n      if (offsets.startOffset && offsets.endOffset) {\n        const length = offsets.endOffset - offsets.startOffset;\n\n        // Check for minimum / maximum\n        const { startOffset, endOffset } = offsets;\n        if ((this.minimum && !(length >= this.minimum)) || (this.maximum && !(length <= this.maximum))) {\n          return results;\n        }\n\n        // Check for overlap\n        if (!this.overlap) {\n          const highlights = this.getData();\n          if (\n            highlights.some(\n              (highlight) =>\n                highlight.startOffset &&\n                highlight.endOffset &&\n                ((startOffset > highlight.startOffset && startOffset < highlight.endOffset) ||\n                  (endOffset > highlight.startOffset && endOffset < highlight.endOffset)),\n            )\n          ) {\n            return results;\n          }\n        }\n      }\n\n      if (isValidOffset(offsets)) {\n        this.highlightRange(offsets.startOffset, offsets.endOffset);\n      }\n\n      return this.getData();\n    }\n\n    return results;\n  }\n\n  /**\n   * Highlights a range of text determined by start and end offsets\n   *\n   * @param {number} startOffset - absolute offset in the element container\n   * @param {number} endOffset - absolute offset in the element container\n   * @returns {DataProps[]}\n   * @memberof Mrkr\n   */\n  highlightRange(startOffset: number, endOffset: number): DataProps[] {\n    const results: DataProps[] = [];\n\n    if (!this.element) {\n      console.error(new Error('Container element not defined for highlighter.'));\n      return results;\n    }\n\n    const textNodes = textNodesUnder(this.element);\n\n    let currentIndex = 0;\n    let startFound = false;\n\n    textNodes.some((textNode) => {\n      if (!textNode.textContent) return false;\n\n      const newCurrentIndex = currentIndex + textNode.textContent.length;\n      if (startOffset >= currentIndex && startOffset < newCurrentIndex) {\n        const newNodes = this.highlightNode(textNode.textContent, startOffset - currentIndex, endOffset - currentIndex);\n        textNode.replaceWith(...newNodes);\n\n        // Start collecting text nodes in between\n        startFound = true;\n      }\n\n      if (endOffset >= currentIndex && endOffset < newCurrentIndex) {\n        const newNodes = this.highlightNode(textNode.textContent, 0, endOffset - currentIndex);\n        textNode.replaceWith(...newNodes);\n\n        // End the loop\n        return true;\n      }\n      if (startFound) {\n        const newNodes = this.highlightNode(textNode.textContent, 0, textNode.textContent.length);\n        textNode.replaceWith(...newNodes);\n      }\n\n      currentIndex = newCurrentIndex;\n      return false;\n    });\n\n    return this.getData();\n  }\n\n  getSelectionEnabled(): boolean {\n    return this.selectionEnabled;\n  }\n\n  toggleSelection(isEnabled: boolean): void {\n    this.selectionEnabled = typeof isEnabled === 'undefined' ? !this.selectionEnabled : isEnabled;\n  }\n\n  enableSelection(): void {\n    this.selectionEnabled = true;\n  }\n\n  disableSelection(): void {\n    this.selectionEnabled = false;\n  }\n}\n"],"file":"Mrkr.js"}