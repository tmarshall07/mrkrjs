{"version":3,"file":"bundle.esm.js","sources":["../../src/Mrkr.ts"],"sourcesContent":["type OffsetProps = {\n  startOffset?: number;\n  endOffset?: number;\n};\n\ntype DataProps = OffsetProps & {\n  text: string;\n  nodes: Text[];\n};\n\n// Type guard for Text nodes\nfunction isTextNode(node: Node): node is Text {\n  return (node as Text).nodeType === 3;\n}\n\n// Type guard for offset\nfunction isValidOffset(offset?: OffsetProps): offset is { startOffset: number; endOffset: number } {\n  return !!(offset && typeof offset.startOffset === 'number' && typeof offset.endOffset === 'number');\n}\n\n/**\n * Gets an array of text nodes under the passed node\n *\n * @param {HTMLElement} node\n * @returns {[HTMLElement]} - array of text nodes\n */\nconst textNodesUnder = (node: any): Text[] => {\n  let all: Text[] = [];\n\n  // eslint-disable-next-line no-param-reassign\n  for (node = node.firstChild; node; node = node.nextSibling) {\n    if (isTextNode(node)) all.push(node);\n    else all = all.concat(textNodesUnder(node));\n  }\n  return all;\n};\n\ninterface Props {\n  minimum?: number;\n  maximum?: number;\n  overlap?: boolean;\n  selectionEnabled?: boolean;\n  onSelection?: (e: PointerEvent, data: DataProps[]) => void;\n}\n\ninterface Range {\n  startContainer: ChildNode;\n  endContainer: ChildNode;\n  startOffset: number;\n  endOffset: number;\n}\n\nexport default class Mrkr {\n  element: HTMLElement;\n\n  highlightClass: string;\n\n  maximum?: number;\n\n  minimum?: number;\n\n  overlap?: boolean;\n\n  onSelection?: (e: PointerEvent, data: DataProps[]) => void;\n\n  private selectionEnabled: boolean;\n\n  constructor(element: HTMLElement, className: string, props: Props = {}) {\n    const { onSelection, maximum = undefined, minimum = undefined, overlap = true, selectionEnabled = true } = props;\n\n    // Make sure element exists\n    if (!element) throw new Error('Element is required.');\n    // Make sure className\n    if (!className) throw new Error('Class name is required.');\n\n    this.element = element;\n    this.highlightClass = className;\n    this.selectionEnabled = selectionEnabled;\n    this.maximum = maximum;\n    this.minimum = minimum;\n    this.overlap = overlap;\n    this.onSelection = onSelection;\n\n    this.handlePointerUp = this.handlePointerUp.bind(this);\n\n    this.setElement(element);\n  }\n\n  /**\n   * Callback run on pointerup\n   *\n   * @private\n   * @param {PointerEvent} event\n   * @memberof Mrkr\n   */\n  private handlePointerUp(event: PointerEvent) {\n    if (this.selectionEnabled) {\n      const results = this.highlight();\n\n      if (this.onSelection) this.onSelection(event, results);\n    }\n  }\n\n  /**\n   * Gets all nodes that have the current className\n   *\n   * @private\n   * @returns {HTMLElement[]}\n   * @memberof Mrkr\n   */\n  private getHighlightedNodes(className?: string): HTMLElement[] {\n    if (!this.element) return [];\n\n    return Array.from(this.element.querySelectorAll(`.${className || this.highlightClass}`));\n  }\n\n  /**\n   * Creates a set of highlighted and non-highlighted nodes to replace the passed text content\n   *\n   * @private\n   * @param {(string | null)} [text='']\n   * @param {number} startOffset\n   * @param {number} endOffset\n   * @returns {ChildNode[]}\n   * @memberof Mrkr\n   */\n  private highlightNode(text: string | null = '', startOffset: number, endOffset: number): ChildNode[] {\n    if (!text) return [];\n\n    const highlightedText = text.substring(startOffset, endOffset);\n\n    if (highlightedText.length > 0) {\n      const highlightedSpanNode = document.createElement('SPAN');\n      highlightedSpanNode.classList.add(this.highlightClass);\n\n      const startTextNode = document.createTextNode(text.substring(0, startOffset));\n      const highlightedTextNode = document.createTextNode(highlightedText);\n      const endTextNode = document.createTextNode(text.substring(endOffset));\n\n      highlightedSpanNode.appendChild(highlightedTextNode);\n\n      const newNodes = [];\n      if (startTextNode.textContent) newNodes.push(startTextNode);\n      newNodes.push(highlightedSpanNode);\n      if (endTextNode.textContent) newNodes.push(endTextNode);\n\n      return newNodes;\n    }\n\n    return [document.createTextNode(text)];\n  }\n\n  /**\n   * Converts relative range offset data to absolute offsets\n   *\n   * @private\n   * @memberof Mrkr\n   */\n  private getAbsoluteOffsets = (\n    startContainer: Text,\n    startOffset: number,\n    endContainer: Text,\n    endOffset: number,\n  ): OffsetProps => {\n    const textNodes = textNodesUnder(this.element);\n    let currentIndex = 0;\n    let absoluteStartOffset;\n    let absoluteEndOffset;\n\n    textNodes.some((textNode) => {\n      if (!textNode?.textContent) return false;\n\n      if (textNode === startContainer) {\n        absoluteStartOffset = currentIndex + startOffset;\n      }\n\n      if (textNode === endContainer) {\n        absoluteEndOffset = currentIndex + endOffset;\n        return true;\n      }\n\n      currentIndex += textNode.textContent.length;\n      return false;\n    });\n\n    if (absoluteStartOffset !== undefined && absoluteEndOffset) {\n      return { startOffset: absoluteStartOffset, endOffset: absoluteEndOffset };\n    }\n\n    return {};\n  };\n\n  /**\n   * Adds the event listener for pointerup\n   *\n   * @memberof Mrkr\n   */\n  private register(): void {\n    this.element.addEventListener('pointerup', this.handlePointerUp);\n  }\n\n  /**\n   * Removes the event listener for pointerup\n   *\n   * @memberof Mrkr\n   */\n  private unregister(): void {\n    this.element.removeEventListener('pointerup', this.handlePointerUp);\n  }\n\n  /**\n   * Sets the current classname\n   *\n   * @param {string} className\n   * @memberof Mrkr\n   */\n  setClassName(className: string): void {\n    this.highlightClass = className;\n  }\n\n  /**\n   * Searches the container element for any highlighted nodes\n   * according to the current className\n   *\n   * @param {string} [className] - optional classname, otherwise will check for this.highlightClass\n   * @returns {DataProps[]}\n   * @memberof Mrkr\n   */\n  getData(className?: string): DataProps[] {\n    if (!this.element) return [];\n\n    const textNodes = textNodesUnder(this.element);\n    const highlightedTextNodes = this.getHighlightedNodes(className).reduce(\n      (arr: Text[], current) => [...arr, ...textNodesUnder(current)],\n      [],\n    );\n\n    let currentIndex = 0;\n\n    let startFound = false;\n\n    const data: DataProps[] = [];\n\n    textNodes.some((textNode, i) => {\n      if (!textNode.textContent) return false;\n\n      const highlightedTextNode = highlightedTextNodes.find((node) => node === textNode);\n\n      if (highlightedTextNode) {\n        if (!startFound) {\n          data.push({\n            startOffset: currentIndex,\n            text: textNode.textContent,\n            nodes: [highlightedTextNode],\n          });\n\n          startFound = true;\n        } else {\n          data[data.length - 1].text += textNode.textContent;\n          data[data.length - 1].nodes.push(highlightedTextNode);\n        }\n\n        // If this node is also the last node\n        if (i === textNodes.length - 1) {\n          data[data.length - 1].endOffset = currentIndex + textNode.textContent.length;\n        }\n      } else if (startFound) {\n        data[data.length - 1].endOffset = currentIndex;\n        startFound = false;\n      }\n\n      currentIndex += textNode.textContent.length;\n\n      return false;\n    });\n\n    return data;\n  }\n\n  /**\n   * Sets the current container element\n   *\n   * @param {HTMLElement} element\n   * @memberof Mrkr\n   */\n  setElement(element: HTMLElement): void {\n    this.unregister();\n    this.element = element;\n    this.register();\n  }\n\n  /**\n   * Clears all or part of the highlighted text blocks\n   *\n   * @param {OffsetProps[]} [offsetTargets] - optional array of offsets to target and remove\n   * @returns {void}\n   * @memberof Mrkr\n   */\n  clear(offsetTargets?: OffsetProps[]): void {\n    if (!this.element) return;\n\n    // Guard against bad offset inputs\n    const offsets = offsetTargets?.filter((o) => isValidOffset(o));\n\n    const highlightedNodes = this.getHighlightedNodes();\n    const textNodes = textNodesUnder(this.element);\n\n    // If offsets array not included, clear all\n    if (!offsets) {\n      highlightedNodes.forEach((highlightedNode) => {\n        highlightedNode.replaceWith(...Array.from(highlightedNode.childNodes));\n      });\n    } else {\n      // Clear all highlighted text that falls between the offsets in the passed offsets array\n      let currentIndex = 0;\n\n      // Clear any text nodes that fall inside any of the offset ranges passed\n      textNodes.some((textNode) => {\n        if (\n          offsets.find(\n            (offset) => isValidOffset(offset) && currentIndex >= offset.startOffset && currentIndex <= offset.endOffset,\n          )\n        ) {\n          const highlightedNode = highlightedNodes.find(\n            (node) => !!Array.from(node.childNodes).find((n) => n === textNode),\n          );\n          if (highlightedNode) {\n            highlightedNode.replaceWith(...Array.from(highlightedNode.childNodes));\n          }\n        }\n\n        // Can stop searching\n        const ends = offsets.map((offset) => offset.endOffset).filter((n) => typeof n === 'number') as number[];\n        if (currentIndex > Math.max(...ends)) {\n          return true;\n        }\n\n        currentIndex += textNode.textContent?.length || 0;\n        return false;\n      });\n    }\n  }\n\n  highlight(): DataProps[] {\n    const selection = window.getSelection();\n    const results: DataProps[] = [];\n\n    // If there's no selection object\n    if (!selection) return results;\n\n    // Container element must be defined\n    if (!this.element) {\n      console.error(new Error('Container element not defined for highlighter.'));\n      return results;\n    }\n\n    const range = selection.getRangeAt(0);\n\n    const { startContainer, endContainer } = range as unknown as Range;\n\n    // Ensure that results are Text nodes\n    if (isTextNode(startContainer) && isTextNode(endContainer)) {\n      const startTextNode = startContainer;\n      const endTextNode = endContainer;\n\n      // If no content's actually been selected\n      if (startTextNode === endTextNode && range.endOffset === range.startOffset) return results;\n\n      // Convert to absolute offsets in the element\n      const offsets = this.getAbsoluteOffsets(startContainer, range.startOffset, endContainer, range.endOffset);\n\n      // Remove native selection\n      selection.removeAllRanges();\n\n      if (offsets.startOffset && offsets.endOffset) {\n        const length = offsets.endOffset - offsets.startOffset;\n\n        // Check for minimum / maximum\n        const { startOffset, endOffset } = offsets;\n        if ((this.minimum && !(length >= this.minimum)) || (this.maximum && !(length <= this.maximum))) {\n          return results;\n        }\n\n        // Check for overlap\n        if (!this.overlap) {\n          const highlights = this.getData();\n          if (\n            highlights.some(\n              (highlight) =>\n                highlight.startOffset &&\n                highlight.endOffset &&\n                ((startOffset > highlight.startOffset && startOffset < highlight.endOffset) ||\n                  (endOffset > highlight.startOffset && endOffset < highlight.endOffset)),\n            )\n          ) {\n            return results;\n          }\n        }\n      }\n\n      if (isValidOffset(offsets)) {\n        this.highlightRange(offsets.startOffset, offsets.endOffset);\n      }\n\n      return this.getData();\n    }\n\n    return results;\n  }\n\n  /**\n   * Highlights a range of text determined by start and end offsets\n   *\n   * @param {number} startOffset - absolute offset in the element container\n   * @param {number} endOffset - absolute offset in the element container\n   * @returns {DataProps[]}\n   * @memberof Mrkr\n   */\n  highlightRange(startOffset: number, endOffset: number): DataProps[] {\n    const results: DataProps[] = [];\n\n    if (!this.element) {\n      console.error(new Error('Container element not defined for highlighter.'));\n      return results;\n    }\n\n    const textNodes = textNodesUnder(this.element);\n\n    let currentIndex = 0;\n    let startFound = false;\n\n    textNodes.some((textNode) => {\n      if (!textNode.textContent) return false;\n\n      const newCurrentIndex = currentIndex + textNode.textContent.length;\n      if (startOffset >= currentIndex && startOffset < newCurrentIndex) {\n        const newNodes = this.highlightNode(textNode.textContent, startOffset - currentIndex, endOffset - currentIndex);\n        textNode.replaceWith(...newNodes);\n\n        // Start collecting text nodes in between\n        startFound = true;\n      }\n\n      if (endOffset >= currentIndex && endOffset < newCurrentIndex) {\n        const newNodes = this.highlightNode(textNode.textContent, 0, endOffset - currentIndex);\n        textNode.replaceWith(...newNodes);\n\n        // End the loop\n        return true;\n      }\n      if (startFound) {\n        const newNodes = this.highlightNode(textNode.textContent, 0, textNode.textContent.length);\n        textNode.replaceWith(...newNodes);\n      }\n\n      currentIndex = newCurrentIndex;\n      return false;\n    });\n\n    return this.getData();\n  }\n\n  getSelectionEnabled(): boolean {\n    return this.selectionEnabled;\n  }\n\n  toggleSelection(isEnabled: boolean): void {\n    this.selectionEnabled = typeof isEnabled === 'undefined' ? !this.selectionEnabled : isEnabled;\n  }\n\n  enableSelection(): void {\n    this.selectionEnabled = true;\n  }\n\n  disableSelection(): void {\n    this.selectionEnabled = false;\n  }\n}\n"],"names":["isTextNode","node","nodeType","isValidOffset","offset","startOffset","endOffset","textNodesUnder","all","firstChild","nextSibling","push","concat","Mrkr","element","className","props","startContainer","endContainer","textNodes","currentIndex","absoluteStartOffset","absoluteEndOffset","some","textNode","textContent","length","undefined","onSelection","maximum","minimum","overlap","selectionEnabled","Error","highlightClass","handlePointerUp","bind","setElement","event","results","highlight","Array","from","querySelectorAll","text","highlightedText","substring","highlightedSpanNode","document","createElement","classList","add","startTextNode","createTextNode","highlightedTextNode","endTextNode","appendChild","newNodes","addEventListener","removeEventListener","highlightedTextNodes","getHighlightedNodes","reduce","arr","current","startFound","data","i","find","nodes","unregister","register","offsetTargets","offsets","filter","o","highlightedNodes","forEach","highlightedNode","replaceWith","childNodes","n","ends","map","Math","max","selection","window","getSelection","console","error","range","getRangeAt","getAbsoluteOffsets","removeAllRanges","highlights","getData","highlightRange","newCurrentIndex","highlightNode","isEnabled"],"mappings":"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"}