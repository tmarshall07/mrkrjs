{"version":3,"file":"bundle.umd.min.js","sources":["../../src/Mrkr.ts"],"sourcesContent":["type OffsetProps = {\n  startOffset?: number;\n  endOffset?: number;\n};\n\ntype DataProps = OffsetProps & {\n  text: string;\n  nodes: Text[];\n};\n\n// Type guard for Text nodes\nfunction isTextNode(node: Node): node is Text {\n  return (node as Text).nodeType === 3;\n}\n\n// Type guard for offset\nfunction isValidOffset(offset?: OffsetProps): offset is { startOffset: number; endOffset: number } {\n  return !!(offset && typeof offset.startOffset === 'number' && typeof offset.endOffset === 'number');\n}\n\n/**\n * Gets an array of text nodes under the passed node\n *\n * @param {HTMLElement} node\n * @returns {[HTMLElement]} - array of text nodes\n */\nconst textNodesUnder = (node: any): Text[] => {\n  let all: Text[] = [];\n\n  // eslint-disable-next-line no-param-reassign\n  for (node = node.firstChild; node; node = node.nextSibling) {\n    if (isTextNode(node)) all.push(node);\n    else all = all.concat(textNodesUnder(node));\n  }\n  return all;\n};\n\ninterface Props {\n  element?: HTMLElement;\n  className?: string;\n  minimum?: number;\n  maximum?: number;\n  overlap?: boolean;\n  onSelection?: (e: PointerEvent, data: DataProps[]) => void;\n}\n\ninterface Range {\n  startContainer: ChildNode;\n  endContainer: ChildNode;\n  startOffset: number;\n  endOffset: number;\n}\n\nexport default class Mrkr {\n  element: HTMLElement;\n\n  highlightClass: string;\n\n  maximum?: number;\n\n  minimum?: number;\n\n  overlap?: boolean;\n\n  onSelection?: (e: PointerEvent, data: DataProps[]) => void;\n\n  private selectionEnabled: boolean;\n\n  constructor(props: Props = {}) {\n    const {\n      element = document.body,\n      className = 'highlight',\n      onSelection,\n      maximum = undefined,\n      minimum = undefined,\n      overlap = true,\n    } = props;\n\n    this.element = element;\n    this.highlightClass = className;\n    this.selectionEnabled = false;\n    this.maximum = maximum;\n    this.minimum = minimum;\n    this.overlap = overlap;\n    this.onSelection = onSelection;\n\n    this.handlePointerUp = this.handlePointerUp.bind(this);\n\n    this.setElement(element);\n  }\n\n  /**\n   * Callback run on pointerup\n   *\n   * @private\n   * @param {PointerEvent} event\n   * @memberof Mrkr\n   */\n  private handlePointerUp(event: PointerEvent) {\n    if (this.selectionEnabled) {\n      const results = this.highlight();\n\n      if (this.onSelection) this.onSelection(event, results);\n    }\n  }\n\n  /**\n   * Gets all nodes that have the current className\n   *\n   * @private\n   * @returns {HTMLElement[]}\n   * @memberof Mrkr\n   */\n  private getHighlightedNodes(className?: string): HTMLElement[] {\n    if (!this.element) return [];\n\n    return Array.from(this.element.querySelectorAll(`.${className || this.highlightClass}`));\n  }\n\n  /**\n   * Creates a set of highlighted and non-highlighted nodes to replace the passed text content\n   *\n   * @private\n   * @param {(string | null)} [text='']\n   * @param {number} startOffset\n   * @param {number} endOffset\n   * @returns {ChildNode[]}\n   * @memberof Mrkr\n   */\n  private highlightNode(text: string | null = '', startOffset: number, endOffset: number): ChildNode[] {\n    if (!text) return [];\n\n    const highlightedText = text.substring(startOffset, endOffset);\n\n    if (highlightedText.length > 0) {\n      const highlightedSpanNode = document.createElement('SPAN');\n      highlightedSpanNode.classList.add(this.highlightClass);\n\n      const startTextNode = document.createTextNode(text.substring(0, startOffset));\n      const highlightedTextNode = document.createTextNode(highlightedText);\n      const endTextNode = document.createTextNode(text.substring(endOffset));\n\n      highlightedSpanNode.appendChild(highlightedTextNode);\n\n      const newNodes = [];\n      if (startTextNode.textContent) newNodes.push(startTextNode);\n      newNodes.push(highlightedSpanNode);\n      if (endTextNode.textContent) newNodes.push(endTextNode);\n\n      return newNodes;\n    }\n\n    return [document.createTextNode(text)];\n  }\n\n  /**\n   * Converts relative range offset data to absolute offsets\n   *\n   * @private\n   * @memberof Mrkr\n   */\n  private getAbsoluteOffsets = (\n    startContainer: Text,\n    startOffset: number,\n    endContainer: Text,\n    endOffset: number,\n  ): OffsetProps => {\n    const textNodes = textNodesUnder(this.element);\n    let currentIndex = 0;\n    let absoluteStartOffset;\n    let absoluteEndOffset;\n\n    textNodes.some((textNode) => {\n      if (!textNode?.textContent) return false;\n\n      if (textNode === startContainer) {\n        absoluteStartOffset = currentIndex + startOffset;\n      }\n\n      if (textNode === endContainer) {\n        absoluteEndOffset = currentIndex + endOffset;\n        return true;\n      }\n\n      currentIndex += textNode.textContent.length;\n      return false;\n    });\n\n    if (absoluteStartOffset && absoluteEndOffset) {\n      return { startOffset: absoluteStartOffset, endOffset: absoluteEndOffset };\n    }\n\n    return {};\n  };\n\n  /**\n   * Adds the event listener for pointerup\n   *\n   * @memberof Mrkr\n   */\n  private register(): void {\n    this.element.addEventListener('pointerup', this.handlePointerUp);\n  }\n\n  /**\n   * Removes the event listener for pointerup\n   *\n   * @memberof Mrkr\n   */\n  private unregister(): void {\n    this.element.removeEventListener('pointerup', this.handlePointerUp);\n  }\n\n  /**\n   * Sets the current classname\n   *\n   * @param {string} className\n   * @memberof Mrkr\n   */\n  setClassName(className: string): void {\n    this.highlightClass = className;\n  }\n\n  /**\n   * Searches the container element for any highlighted nodes\n   * according to the current className\n   *\n   * @param {string} [className] - optional classname, otherwise will check for this.highlightClass\n   * @returns {DataProps[]}\n   * @memberof Mrkr\n   */\n  getData(className?: string): DataProps[] {\n    if (!this.element) return [];\n\n    const textNodes = textNodesUnder(this.element);\n    const highlightedTextNodes = this.getHighlightedNodes(className).reduce(\n      (arr: Text[], current) => [...arr, ...textNodesUnder(current)],\n      [],\n    );\n\n    let currentIndex = 0;\n\n    let startFound = false;\n\n    const data: DataProps[] = [];\n\n    textNodes.some((textNode, i) => {\n      if (!textNode.textContent) return false;\n\n      const highlightedTextNode = highlightedTextNodes.find((node) => node === textNode);\n\n      if (highlightedTextNode) {\n        if (!startFound) {\n          data.push({\n            startOffset: currentIndex,\n            text: textNode.textContent,\n            nodes: [highlightedTextNode],\n          });\n\n          startFound = true;\n        } else {\n          data[data.length - 1].text += textNode.textContent;\n          data[data.length - 1].nodes.push(highlightedTextNode);\n        }\n\n        // If this node is also the last node\n        if (i === textNodes.length - 1) {\n          data[data.length - 1].endOffset = currentIndex + textNode.textContent.length;\n        }\n      } else if (startFound) {\n        data[data.length - 1].endOffset = currentIndex;\n        startFound = false;\n      }\n\n      currentIndex += textNode.textContent.length;\n\n      return false;\n    });\n\n    return data;\n  }\n\n  /**\n   * Sets the current container element\n   *\n   * @param {HTMLElement} element\n   * @memberof Mrkr\n   */\n  setElement(element: HTMLElement): void {\n    this.unregister();\n    this.element = element;\n    this.register();\n  }\n\n  /**\n   * Clears all or part of the highlighted text blocks\n   *\n   * @param {OffsetProps[]} [offsetTargets] - optional array of offsets to target and remove\n   * @returns {void}\n   * @memberof Mrkr\n   */\n  clear(offsetTargets?: OffsetProps[]): void {\n    if (!this.element) return;\n\n    // Guard against bad offset inputs\n    const offsets = offsetTargets?.filter((o) => isValidOffset(o));\n\n    const highlightedNodes = this.getHighlightedNodes();\n    const textNodes = textNodesUnder(this.element);\n\n    // If offsets array not included, clear all\n    if (!offsets) {\n      highlightedNodes.forEach((highlightedNode) => {\n        highlightedNode.replaceWith(...Array.from(highlightedNode.childNodes));\n      });\n    } else {\n      // Clear all highlighted text that falls between the offsets in the passed offsets array\n      let currentIndex = 0;\n\n      // Clear any text nodes that fall inside any of the offset ranges passed\n      textNodes.some((textNode) => {\n        if (\n          offsets.find(\n            (offset) => isValidOffset(offset) && currentIndex >= offset.startOffset && currentIndex <= offset.endOffset,\n          )\n        ) {\n          const highlightedNode = highlightedNodes.find(\n            (node) => !!Array.from(node.childNodes).find((n) => n === textNode),\n          );\n          if (highlightedNode) {\n            highlightedNode.replaceWith(...Array.from(highlightedNode.childNodes));\n          }\n        }\n\n        // Can stop searching\n        const ends = offsets.map((offset) => offset.endOffset).filter((n) => typeof n === 'number') as number[];\n        if (currentIndex > Math.max(...ends)) {\n          return true;\n        }\n\n        currentIndex += textNode.textContent?.length || 0;\n        return false;\n      });\n    }\n  }\n\n  highlight(): DataProps[] {\n    const selection = window.getSelection();\n    const results: DataProps[] = [];\n\n    // If there's no selection object\n    if (!selection) return results;\n\n    // Container element must be defined\n    if (!this.element) {\n      console.error(new Error('Container element not defined for highlighter.'));\n      return results;\n    }\n\n    const range = selection.getRangeAt(0);\n\n    const { startContainer, endContainer } = range as unknown as Range;\n\n    // Ensure that results are Text nodes\n    if (isTextNode(startContainer) && isTextNode(endContainer)) {\n      const startTextNode = startContainer;\n      const endTextNode = endContainer;\n\n      // If no content's actually been selected\n      if (startTextNode === endTextNode && range.endOffset === range.startOffset) return results;\n\n      // Convert to absolute offsets in the element\n      const offsets = this.getAbsoluteOffsets(startContainer, range.startOffset, endContainer, range.endOffset);\n\n      // Remove native selection\n      selection.removeAllRanges();\n\n      if (offsets.startOffset && offsets.endOffset) {\n        const length = offsets.endOffset - offsets.startOffset;\n\n        // Check for minimum / maximum\n        const { startOffset, endOffset } = offsets;\n        if ((this.minimum && !(length >= this.minimum)) || (this.maximum && !(length <= this.maximum))) {\n          return results;\n        }\n\n        // Check for overlap\n        if (!this.overlap) {\n          const highlights = this.getData();\n          if (\n            highlights.some(\n              (highlight) =>\n                highlight.startOffset &&\n                highlight.endOffset &&\n                ((startOffset > highlight.startOffset && startOffset < highlight.endOffset) ||\n                  (endOffset > highlight.startOffset && endOffset < highlight.endOffset)),\n            )\n          ) {\n            return results;\n          }\n        }\n      }\n\n      if (isValidOffset(offsets)) {\n        this.highlightRange(offsets.startOffset, offsets.endOffset);\n      }\n\n      return this.getData();\n    }\n\n    return results;\n  }\n\n  /**\n   * Highlights a range of text determined by start and end offsets\n   *\n   * @param {number} startOffset - absolute offset in the element container\n   * @param {number} endOffset - absolute offset in the element container\n   * @returns {DataProps[]}\n   * @memberof Mrkr\n   */\n  highlightRange(startOffset: number, endOffset: number): DataProps[] {\n    const results: DataProps[] = [];\n\n    if (!this.element) {\n      console.error(new Error('Container element not defined for highlighter.'));\n      return results;\n    }\n\n    const textNodes = textNodesUnder(this.element);\n\n    let currentIndex = 0;\n    let startFound = false;\n\n    textNodes.some((textNode) => {\n      if (!textNode.textContent) return false;\n\n      const newCurrentIndex = currentIndex + textNode.textContent.length;\n      if (startOffset >= currentIndex && startOffset < newCurrentIndex) {\n        const newNodes = this.highlightNode(textNode.textContent, startOffset - currentIndex, endOffset - currentIndex);\n        textNode.replaceWith(...newNodes);\n\n        // Start collecting text nodes in between\n        startFound = true;\n      }\n\n      if (endOffset >= currentIndex && endOffset < newCurrentIndex) {\n        const newNodes = this.highlightNode(textNode.textContent, 0, endOffset - currentIndex);\n        textNode.replaceWith(...newNodes);\n\n        // End the loop\n        return true;\n      }\n      if (startFound) {\n        const newNodes = this.highlightNode(textNode.textContent, 0, textNode.textContent.length);\n        textNode.replaceWith(...newNodes);\n      }\n\n      currentIndex = newCurrentIndex;\n      return false;\n    });\n\n    return this.getData();\n  }\n\n  getSelectionEnabled(): boolean {\n    return this.selectionEnabled;\n  }\n\n  toggleSelection(isEnabled: boolean): void {\n    this.selectionEnabled = typeof isEnabled === 'undefined' ? !this.selectionEnabled : isEnabled;\n  }\n\n  enableSelection(): void {\n    this.selectionEnabled = true;\n  }\n\n  disableSelection(): void {\n    this.selectionEnabled = false;\n  }\n}\n"],"names":["isTextNode","node","nodeType","isValidOffset","offset","startOffset","endOffset","textNodesUnder","all","firstChild","nextSibling","push","concat","Mrkr","_this","this","props","_classCallCheck","_defineProperty","startContainer","endContainer","absoluteStartOffset","absoluteEndOffset","textNodes","element","currentIndex","some","textNode","textContent","length","_props$element","document","body","className","_props$className","onSelection","maximum","undefined","_props$maximum","minimum","_props$minimum","overlap","_props$overlap","highlightClass","selectionEnabled","handlePointerUp","bind","setElement","value","event","results","highlight","Array","from","querySelectorAll","text","arguments","highlightedText","substring","highlightedSpanNode","createElement","classList","add","startTextNode","createTextNode","highlightedTextNode","endTextNode","appendChild","newNodes","addEventListener","removeEventListener","highlightedTextNodes","getHighlightedNodes","reduce","arr","current","_toConsumableArray","startFound","data","i","find","nodes","unregister","register","offsetTargets","offsets","filter","o","highlightedNodes","_textNode$textContent","highlightedNode","childNodes","n","replaceWith","apply","ends","map","Math","max","forEach","selection","window","getSelection","console","error","Error","range","getRangeAt","_ref","getAbsoluteOffsets","removeAllRanges","getData","highlightRange","_this2","newCurrentIndex","highlightNode","isEnabled"],"mappings":"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"}